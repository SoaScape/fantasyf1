buildscript {
    ext {
        springBootVersion = '1.2.7.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
        classpath('io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'io.spring.dependency-management' 
apply plugin: 'war'
apply from: "$rootDir/gradle/generated.gradle"


war {
    baseName = 'f1'
    version = '2.0.0'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-ws')
    compile('org.springframework.boot:spring-boot-starter-mail')
    compile "org.projectlombok:lombok:1.16.2"
    compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity3:2.1.1.RELEASE')
    compile('org.apache.commons:commons-collections4:4.0')
    compile('commons-io:commons-io:2.4')
    compile('org.apache.httpcomponents:httpclient:4.5.3')
    runtime('com.h2database:h2')
    runtime('postgresql:postgresql:9.1-901-1.jdbc4')
    runtime('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('org.springframework.boot:spring-boot-starter-test') 
    testCompile('org.springframework.ws:spring-ws-test')
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

idea{
    module {
        sourceDirs += file('build/generated-sources')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

task afterEclipseImport {
	dependsOn genJaxb
}

task stage(type: Copy, dependsOn: [clean, genJaxb, build]) {
    from jar.archivePath
    into project.rootDir 
    rename {
        'fantasyf1.jar'
    }
}
stage.mustRunAfter(clean)

clean << {
    project.file('fantasyf1.jar').delete()
}
